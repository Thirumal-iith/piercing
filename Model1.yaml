# YAML for get_model component
name: Load Model Architecture
description: Loads a model architecture for a continual learning scenario.
inputs:
  - {name: model_name, type: String}
  - {name: scenario, type: Dataset}
outputs:
  - {name: model, type: Model}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        (python3 -m pip install --quiet --no-warn-script-location avalanche torchvision || python3 -m pip install --quiet avalanche torchvision --user) && "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import json
        import os
        import joblib
        import torch.nn as nn
        from avalanche.models import SimpleMLP, SimpleCNN
        from torchvision.models import resnet18

        parser = argparse.ArgumentParser()
        parser.add_argument("--model_name", type=str, required=True)
        parser.add_argument("--scenario", type=str, required=True)
        parser.add_argument("--model", type=str, required=True)
        args = parser.parse_args()

        with open(args.scenario, "r") as f:
            scenario_metadata = json.load(f)
        num_classes = scenario_metadata["n_classes"]

        model_name = args.model_name.lower()
        if model_name == "simplemlp":
            model = SimpleMLP(num_classes=num_classes)
        elif model_name == "simplecnn":
            model = SimpleCNN(num_classes=num_classes)
        elif model_name == "resnet18":
            model = resnet18(pretrained=False)
            model.fc = nn.Linear(model.fc.in_features, num_classes)
        else:
            raise ValueError(f"Unknown model: {args.model_name}")

        os.makedirs(os.path.dirname(args.model), exist_ok=True)
        joblib.dump(model, args.model)
    args:
      - --model_name
      - {inputValue: model_name}
      - --scenario
      - {inputPath: scenario}
      - --model
      - {outputPath: model}